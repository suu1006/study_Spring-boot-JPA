package user.controller;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.ModelAndView;

import user.bean.UserDTO;
import user.service.UserService;

@RestController
@RequestMapping(value="user")
public class UserController {
	@Autowired
	private UserService userService;
	
	@RequestMapping(value="writeForm", method=RequestMethod.GET)
	public ModelAndView write() {
		ModelAndView mav = new ModelAndView();
		mav.setViewName("/user/writeForm");
		return mav;
	}
	
	@PostMapping(value="write")
	public void write(@ModelAttribute UserDTO userDTO) {
		userService.write(userDTO);
	}
	
	@PostMapping(value="checkId")
	public String checkId(@RequestParam String id) {
		return userService.checkId(id);
	}
	
	@GetMapping(value="list")
	public ModelAndView list(@RequestParam(required = false, defaultValue = "1") String pg) {
		ModelAndView mav = new ModelAndView();
		//mav.addObject("pg", pg);
		mav.setViewName("/user/list");
		return mav;
	}
	
	@PostMapping(value="getUserList")
	public Map<String, Object> getUserList(@RequestParam(required = false, defaultValue = "1") String pg){
		return userService.getUserList(pg);
	}
	
	
	@GetMapping(value="updateForm")
	public ModelAndView updateForm() {
		ModelAndView mav = new ModelAndView();
		mav.setViewName("/user/updateForm");
		return mav;
	}
	
	@PostMapping(value="getUser")
	public Optional<UserDTO> getUser(@RequestParam String id){
		return userService.getUser(id);
	}
	
	@PostMapping(value="update")
	public void update(@ModelAttribute UserDTO userDTO) {
		userService.update(userDTO);
	}
	
	@GetMapping(value="deleteForm")
	public ModelAndView deleteForm() {
		ModelAndView mav = new ModelAndView();
		mav.setViewName("/user/deleteForm");
		return mav;
	}
	
	@PostMapping(value="delete")
	public void delete(@RequestParam String id) {
		userService.delete(id);
	}
	
}


































