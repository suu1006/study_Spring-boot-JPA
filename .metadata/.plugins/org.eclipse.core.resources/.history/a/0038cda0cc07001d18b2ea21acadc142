package user.service;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import user.bean.UserDTO;
import user.dao.UserDAO;

@Service
public class UserServiceImpl implements UserService {
	@Autowired
	private UserDAO userDAO = null;
//	@Autowired
//	private UserPaging userPaging;

	@Override
	public void write(UserDTO userDTO) {
		//id를 primary key로 설정를 했기 때문에 
		//똑같은 id가 없으면 insert가 수행이 되고, 있으면 update가 수행이 된다.
		userDAO.save(userDTO);
	}

	@Override
	public String checkId(String id) {
		Optional<UserDTO> userDTO = userDAO.findById(id);
		System.out.println(userDTO); //id가 없으면 Optional.empty라 출력이 된다.
		
		if(userDTO.isPresent()) //값이 없으면 false
			return "exist"; //사용 불가능
		else
			return "non_exist"; //사용 가능
	}
	
	
	@Override
	public Map<String, Object> getUserList(String pg) {
		//1페이지당 5개씩
		int endNum = Integer.parseInt(pg) * 5;
		int startNum = endNum - 5;
		
		Map<String, Integer> map = new HashMap<String, Integer>();
		map.put("startNum", startNum);
		map.put("endNum", endNum);
		
		List<UserDTO> list = userDAO.findAll();
		
		//페이징처리
//		int totalA = userDAO.getTotalA(); //총글수
	
//		userPaging.setCurrentPage(Integer.parseInt(pg));
//		userPaging.setPageBlock(3);
//		userPaging.setPageSize(5);
//		userPaging.setTotalA(totalA);
//		userPaging.makePagingHTML();
		
		Map<String, Object> sendMap = new HashMap<String, Object>();
		sendMap.put("list", list);
//		sendMap.put("userPaging", userPaging);
		return sendMap;
	}
	
	@Override
	public Optional<UserDTO> getUser(String id) {
		return userDAO.findById(id);
	}

	@Override
	public void update(UserDTO userDTO) {
		userDAO.save(userDTO);
	}

	@Override
	public void delete(String id) {
		//deleteById()는 내부적으로 findById()를 수행하고 delete를 수행한다.
		//만약 없으면 EmptyResultDataAccessException을 발생한다.
		userDAO.deleteById(id);
	}
	/*
	 * 첫번째 방법 - 쿼리메소드를 사용.
	@Override
	public List<UserDTO> getUserSearchList(Map<String, String> map) {
		String searchOption = map.get("searchOption");
		String keyword = map.get("keyword");
		
		if (searchOption.equals("name")) { // 이름으로 검색
			return userDAO.findByNameContaining(keyword); // find를 사용하면 select 가 된다. findByNameContaining 키워드 포함한 이름으로 찾을거야 
		} else { // id로 검색
			return userDAO.findByIdContaining(keyword);
		}
	}
	*/
	/*
// 메소드를 만들어서 사용해야한다.
	 * 
  쿼리 메소드 JPA에서 제공하는 CrudRepository, 또는 JpaRepository를 이용해서 기본적인 CRUD 기능을 수행했다.
  일반적으로 JPA를 이용해서 목록 기능을 구현할 때는 JPQL(Java Persistence Query Language)을 이용하면 된다.
  JPQL은 검색 대상이 테이블이 아닌 엔티티 라는 것만 제외하고는 기본 구조와 문법이 기존의 SQL과 유사하다.
  
  스프링 JPA에서는 복잡한 JPQL을 대신해서 처리할 수 있는 쿼리 메소드라는 기능을 제공한다. 쿼리 메소드는 메소드의 이름으로 필요한
  쿼리를 만들어주는 기능으로, 몇 가지 네이밍 룰만 알면 된다.
  
  쿼리 메소드를 작성할 때 엔티티 이름은 생략할 수 있다. 현재 사용하는 Repository 인터페이스에서 선언된 타입 정보를 기준으로 자동
  엔티티 이름이 적용된다.
  
  [형식] 
  ① Board 엔티티에서 title 변수 값만 조회한다. - find + 엔티티 + By + 변수 - findBy + 변수 
  ② Board 엔티티에서 데이터를 정렬하고 조회 - OrderBy + 변수 + Asc Or Desc
	 */  
	
	
	// 두번째 방법 - 어노테이션 사용.
	@Override
	public List<UserDTO> getUserSearchList(Map<String, String> map) {
		String searchOption = map.get("searchOption");
		String keyword = map.get("keyword");
		
		if (searchOption.equals("name")) { // 이름으로 검색
			return userDAO.findByNameContaining(keyword); // find를 사용하면 select 가 된다. findByNameContaining 키워드 포함한 이름으로 찾을거야 
		} else { // id로 검색
			return userDAO.findByIdContaining(keyword);
		}
	}
	
	
}
 	
		
		
		
		
		
		
		
		
		
		
		
		
		
		
 












